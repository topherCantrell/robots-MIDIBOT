; ========================================================
; NMIY0031 Monitor Modification
;  - Vectors user interrupts to RAM mirrors
;  - Appends serial I/O routines to end of ROM
; ========================================================


	.equ	STCF,0x56
	.equ	SNGFLG,0x55
	.equ	TSTOR0,0x51
	.equ	TSTOR1,0x52
	.equ	TSTOR2,0x53
	.equ	TSTOR3,0x54

	.equ	V1DEL,0x60
	.equ	V1MSB,0x61
	.equ	V1LSB,0x62
	.equ	V1VN,0x63

	.equ	V2DEL,0x64
	.equ	V2MSB,0x65
	.equ	V2LSB,0x66
	.equ	V2VN,0x67

	.equ	V3DEL,0x68
	.equ	V3MSB,0x69
	.equ	V3LSB,0x6A
	.equ	V3VN,0x6B

	.equ	TICKCNT,0x6C

	.equ	ISRS0,0x40
	.equ	ISRS1,0x41
	.equ	ISRS2,0x42
	.equ	ISRS3,0x43
	.equ	ISRS4,0x44
	.equ	ISRS5,0x45
	.equ	ISRS6,0x46
	.equ	ISRS7,0x47
	.equ	ISRS8,0x48
	.equ	ISRS9,0x49
	.equ	ISRS10,0x4A
	.equ	ISRS11,0x4B

	.equ	GTIMEL,0x4C
	.equ	GTIMEH,0x4D


;=========================================================
; To make interrupt vectors 'changeable', these vectors
; should call RAM mirrors. (RESET must be fixed)
;
; The monitoring program expects to find its serial
; interrupt in place -- the serial interrupt must be
; left intact unless the monitor is modified.
; ========================================================

; RESET  0000
; INT0   0003
; TC0    000B
; INT1   0013
; TC     001B
; SERIAL 002B

;       .org    0x0000  ; Reset
;       ljmp    0x8003
;	.org    0x0003  ; INT0
;	ljmp    0x8003
;	.org    0x000b  ; TC0
;	ljmp    0x800b
;	.org    0x0013  ; INT1
;	ljmp    0x8013
;	.org    0x001b  ; TC
;	ljmp    0x801b
;       .org    0x002b  ; Serial
;       ljmp    0x802b

;=========================================================
; Library for serial I/O from ASM programs.
;=========================================================

	.org	0x1500	; The montior actually ends before 0x1300

; Init interrupts for local serial I/O

SERINIT:

	; The MONITOR ROM normally catches serial interrupts.
	; That feature must be disabled before other programs
	; can use the port.

	MOV IE,#0       ; disable all irpts
        MOV PCON,#0     ; T1 baudrate not doubled
        MOV TMOD,#H'20  ; T1 mode 2, T0 mode 0
        MOV TH1,#H'FD   ; 9600 baud @ 11.0592 MHz
        SETB TCON.6     ; enable timer 1
        MOV SCON,#H'52  ; UART mode 1 (8-bit)
	RET

; Binary Download AaSsddddddd....
DOWNLOAD:

	; Make sure the interrupts are configured

	ACALL	SERINIT

	; Hold on to DPTR

	mov	r0,DPL	; External Data Pointer LSB
	mov	r1,DPH	; External Data Pointer MSB

	; Fetch the address

	acall	GETCHAR ; Data MSB ...
	mov	DPH,a	; ... set MSB
	acall	GETCHAR	; Data LSB ...
	mov	DPL,a	; ... set LSB

	; Fetch the data size

	acall	GETCHAR	; Size MSB ...
	mov	r2,a	; ... set MSB
	acall	GETCHAR	; Size LSB ...
	mov	r3,a	; ... set LSB

	; Pre-decrement the counter

	xch	a,r3
	subb	a,#1
	xch	a,r3
	jnc	DL1
	clr	c
	xch	a,r2
	subb	a,#1
	xch	a,r2

	; Loop over data

DL1:	acall	GETCHAR	; Get binary byte
	movx	@DPTR,a	; Save it in memory
	inc	DPTR	; Bump pointer
	XCH	A,R3	; (Use A for flags)
	SUBB	A,#1	; Decrement LSB 
	XCH	A,R3	; Back in R3
	JNC	DL1	; No borrow -- keep going
	CLR	C	; Clear the borrow flag
	XCH	A,R2	; (Use A for flags)
	SUBB	A,#1	; Decrement MSB
	XCH	A,R2	; Back in R2
	JNC	DL1	; No borrow -- keep going

	; Restore the DPTR and restart monitor
	
DDONE:	mov	DPL,r0	; Restore the External Data Pointer
	mov	DPH,r1	;
	ljmp	0	; Restart MONITOR

; Returns test in A. If A is not 0, character is available
ISCHAR:	mov a,SCON      ; get rx flag in bit 0
        anl a,#1	; test the bit
	ret		; !=0 if char available

; Returns the character in A.
GETCHAR:
	jnb SCON.0,*    ; await Rx interrupt flag
        clr SCON.0
        mov a,SBUF      ; get new char in pr
	ret

; Sends the character in A.
SNDCHAR:
	jnb SCON.1,*    ; await Tx interrupt flag
        clr SCON.1      ; clear flag
        mov SBUF,a      ; output pr char to UART
	ret

	.org	0x2000

;===============================================
;
; R0,R1 = Song table (MSB,LSB)
; A = Song number
PLAY_SONG:
	MOV	SNGFLG,#0	; Stop any music
	rl	a		; *2
	rl	a		; *4
	rl	a		; *8
	MOV	DPL,A		; Set DTPR
	MOV	A,R0		; '
	MOV	DPH,A		; '
	movx	a,@DPTR		; Get voice 1
	ADD	a,DPH		; '
	mov	V1MSB,A		; '
	inc	dpl		; '
	movx	a,@DPTR		; '
	mov	V1LSB,A		; '
	inc	dpl		; Get voice 2
	movx	a,@DPTR		; '
	add	a,DPH		; '
	mov	V2MSB,A		; '
	inc	dpl		; '
	movx	a,@DPTR		; '
	mov	V2LSB,A		; '
	inc	dpl		; Get voice 3
	movx	a,@DPTR		; '
	add	a,DPH		; '
	mov	V3MSB,A		; '
	inc	dpl		; '
	movx	a,@DPTR		; '
	mov	V3LSB,A		; '
	mov	V1DEL,#1	; Set delays to load next time
	MOV	V2DEL,#1	; '
	MOV	V3DEL,#1	; '
	MOV	V1VN,#0		; Set voice numbers in descriptors
	MOV	V2VN,#1		; '
	MOV	V3VN,#2		; '
	MOV	TICKCNT,#1	; Set ISR to start next interrupt
	MOV	SNGFLG,#0xFF	; Tell ISR to work
	RET			; Done
		
;===============================================
; Descriptor points to voice data
; 0      1    2    3
; Delay  MSB  LSB  VoiceNumber
; 
; When delay reaches 0, a new delay and note are loaded into the 
; descriptor.
;
; If the note number is 0xFF, the note is transparent -- the
; voice is left "running" for the delay.
;
; If the delay is 0, a special command follows. Here is the complete
; format for special commands
; 00 00 rr vv	; Set a specific register to a specific value
; 00 03 vv	; Set the staccato factor
; 00 ??		; End the song
;===============================================
; R1 = pointer to descriptor
; A,R0,R1,R2,R5,R6,R7,DPTR - Garbled
PROCESS_VOICE:

	dec	@r1		; Decrement the delay
	mov	a,@r1		; Get the delay
	cjne	a,#0,PV02	; Jump if not time for a new note
; Load new note
	; Copy the descriptor info into temp space
	mov	TSTOR3,r1	; Pointer
	inc	r1		; Next
	mov	TSTOR0,@r1	; MSB
	inc	r1		; Next
	mov	TSTOR1,@r1	; LSB
	inc	r1		; Next
	mov	TSTOR2,@r1	; Voice
PVLD:	mov	r1,TSTOR3	; Restore pointer
	acall	FETCH_TST	; Get next byte of song
	cjne	a,#0,PV10	; Jump if normal note
; Handle special event
	acall	FETCH_TST	; Get second byte
	cjne	a,#0,PV12	; Jump if not a register command
; Handle register command
	acall	FETCH_TST	; Get register number
	mov	r0,a		; Into parameter
	acall	FETCH_TST	; Get value
	mov	r1,a		; Into parameter
	acall	AYOUT		; Set the register
	ajmp	PVLD		; Process next
PV12:	cjne	a,#3,PV13	; Jump if not a staccato spec
; Set staccato factor
	acall	FETCH_TST	; Get new staccato factor
	mov	STCF,a		; Into memory
	ajmp	PVLD		; Process next
PV13:	
; Turn off song flag
	mov	SNGFLG,#0	; Flag ISR
	ajmp	PV03		; Music is stopped now
PV02:
; Test for staccato
	cjne	a,STCF,PV03 	; Do nothing (but decrement count)
	inc	r1		; Point to voice number
	inc	r1		; '
	inc	r1		; '
	mov	a,@r1		; Get voice number
	rl	a		; *2 = register number
	mov	r0,a		; Into parameter
	mov	r1,#0		; Silence value
	acall	AYOUT		; Set fine
	inc	r0		; Point to coarse
	acall	AYOUT		; Set coarse
	ajmp	PV03		; Done
; Load a normal note
PV10:	mov	@r1,a		; Store new delay
	mov	r1,TSTOR2	; Voice number
	acall	FETCH_TST	; Get note number
	cjne	a,#0xFF,PV11	; "Transparent" note
	ajmp	PV04		; Leave voice alone
PV11:	mov	r0,a		; Note number to parameter
	acall	PLAY_NOTE	; Start the note
; Copy new PTR to descriptor
PV04:	mov	r1,TSTOR3	; Descriptor
	inc	r1		; Point to MSB
	mov	@r1,TSTOR0	; Copy MSB back
	inc	r1		; Point to LSB
	mov	@r1,TSTOR1	; Copy LSB back
PV03:	ret			; Done
;===============================================
; ++TSTOR1:2
; A,DPTR - Garbled
FETCH_TST:
	mov	dpl,TSTOR1	; Set ...
	mov	dph,TSTOR0	; ... DPTR
	mov	a,TSTOR1	; LSB
	cjne	a,#0xFF,fb01	; Going to carry?
	inc	TSTOR0		; Carry into the MSB
fb01:	inc	TSTOR1		; Bump the LSB
	movx	a,@DPTR		; Get value
	ret			; Done
;===============================================
; R0 contains the note-number
; R1 contains the voice-number
; A,R0,R1,R5,R6,R7,DPTR - Garbled
;
PLAY_NOTE:
	mov	dph,#0x22	; Base of note table
	mov	a,r0		; Note number ...
	rl	a		; ... * 2 ...
	ANL	A,#0xFE		; Mask off lower bit
	mov	dpl,a		; ... is table offset.
	movx	a,@DPTR		; Get first byte
	mov	r5,a		; R5 = first byte
	inc	dpl		; Next in table
	movx	a,@DPTR		; Get second byte
	mov	r6,a		; R6 = second byte
	MOV	A,R1		; Hold onto ...
	MOV	R7,A		; ... register base
	RL	A
	MOV	R0,a		; Register = FINE
	MOV	A,R5		; Get fine ...
	MOV	R1,A		; ... value into R1
	LCALL	AYOUT		; Set FINE
	MOV	A,R7		; Register base ...
	RL	A
	MOV	R0,a		; ... into R0
	INC	R0		; Register = COARSE
	MOV	A,R6		; Get coarse ...
	MOV	R1,A		; ... value into R1
	LCALL	AYOUT		; Set COARSE
	RET			; Done
;===============================================
; A,R0,R1,DPTR - Garbled
;
MUSIC_INIT:
	MOV   R0,#0x07	; Enable tones only
	MOV   R1,#0xF8
	LCALL AYOUT
	MOV   R0,#0x08	; Volume A
	MOV   R1,#0x08
	LCALL AYOUT
	MOV   R0,#0x09	; Volume B
	MOV   R1,#0x08
	LCALL AYOUT
	MOV   R0,#0x0A	; Volume C
	MOV   R1,#0x08
	LCALL AYOUT
	MOV   STCF,#1
	ret

;===============================================
;===============================================

ISR:

	MOV	ISRS0,A		; Save all registers
	MOV	ISRS1,PSW	; '
	MOV	ISRS2,R0	; '
	MOV	ISRS3,R1	; '
	MOV	ISRS4,R2	; '
	MOV	ISRS5,R3	; '
	MOV	ISRS6,R4	; '
	MOV	ISRS7,R5	; '
	MOV	ISRS8,R6	; '
	MOV	ISRS9,R7	; '
	MOV	ISRS10,DPL	; '
	MOV	ISRS11,DPH	; '

	mov	a,SNGFLG	; Song playing?
	cjne	a,#0xFF,IS01	; NO: Skip music processing

; Process music
	dec	TICKCNT		; Interrupts/musicTick
	mov	a,TICKCNT	; Time to check voiced?
	cjne	a,#0,IS01	; NO: Skip music processing
	mov	r1,#V1DEL	; Voice 1 descriptor
	acall	PROCESS_VOICE	; Process voice 1
	mov	r1,#V2DEL	; Voice 2 descriptor
	acall	PROCESS_VOICE	; Process voice 2
	mov	r1,#V3DEL	; Voice 3 descriptor
	acall	PROCESS_VOICE	; Process voice 3
	mov	TICKCNT,#6	; Restore tick counter

IS01:
; Process other things
; General two-byte counter

	MOV	A,GTIMEL	; LSB of General Clock
	CJNE	A,#0xFF,IS02	; Time to overflow?
	INC	GTIMEH		; Yes -- bump MSB
IS02:	INC	GTIMEL		; Always bump LSB

	MOV	A,ISRS0		; Restore all registers.
	MOV	PSW,ISRS1	; '
	MOV	R0,ISRS2	; '
	MOV	R1,ISRS3	; '
	MOV	R2,ISRS4	; '
	MOV	R3,ISRS5	; '
	MOV	R4,ISRS6	; '
	MOV	R5,ISRS7	; '
	MOV	R6,ISRS8	; '
	MOV	R7,ISRS9	; '
	MOV	DPL,ISRS10	; '
	MOV	DPH,ISRS11	; '
	RETI			; Return from ISR	

;===============================================
; R0 = register
; R1 = value
; A,DPTR - Garbled
;
AYOUT:
	mov     dph,#0xFF       ; Set DPTR to latch
	mov     dpl,#0xFC       ; '
	mov     P1,R0           ; Register -> P1
	mov     a,#0x03         ; 11 -> Control
	movx    @DPTR,a         ; '
	mov     a,#0            ; 00 -> Control
	movx    @DPTR,a         ; '
	mov     P1,r1           ; Value -> P1
	mov     a,#0x1          ; 01 -> Control
	movx    @DPTR,a         ; '
	mov     a,#0		; 00 -> Control
	movx    @DPTR,a		; '
	ret

;===============================================
;===============================================
	.org	0x2200
; Note table must be located at 0x??00
	; 96 notes defined (0=silence)
	.db	0x00,0x00,0x9C,0x0C
	.db	0xE7,0x0B,0x3C,0x0B
	.db	0x9B,0x0A,0x02,0x0A
	.db	0x73,0x09,0xEB,0x08
	.db	0x6B,0x08,0xF2,0x07
	.db	0x80,0x07,0x14,0x07
	.db	0xAE,0x06,0x4E,0x06
	.db	0xF4,0x05,0x9E,0x05
	.db	0x4D,0x05,0x01,0x05
	.db	0xB9,0x04,0x75,0x04
	.db	0x35,0x04,0xF9,0x03
	.db	0xC0,0x03,0x8A,0x03
	.db	0x57,0x03,0x27,0x03
	.db	0xFA,0x02,0xCF,0x02
	.db	0xA7,0x02,0x84,0x02
	.db	0x5D,0x02,0x3B,0x02
	.db	0x1B,0x02,0xFC,0x01
	.db	0xE0,0x01,0xC5,0x01
	.db	0xAC,0x01,0x94,0x01
	.db	0x7D,0x01,0x68,0x01
	.db	0x53,0x01,0x40,0x01
	.db	0x2E,0x01,0x1D,0x01
	.db	0x0D,0x01,0xFE,0x00
	.db	0xF0,0x00,0xE2,0x00
	.db	0xD6,0x00,0xCA,0x00
	.db	0xBE,0x00,0xB4,0x00
	.db	0xAA,0x00,0xA0,0x00
	.db	0x97,0x00,0x8F,0x00
	.db	0x87,0x00,0x7F,0x00
	.db	0x78,0x00,0x71,0x00
	.db	0x6B,0x00,0x65,0x00
	.db	0x5F,0x00,0x5A,0x00
	.db	0x55,0x00,0x50,0x00
	.db	0x4C,0x00,0x47,0x00
	.db	0x43,0x00,0x40,0x00
	.db	0x3C,0x00,0x39,0x00
	.db	0x35,0x00,0x32,0x00
	.db	0x30,0x00,0x2D,0x00
	.db	0x2A,0x00,0x28,0x00
	.db	0x26,0x00,0x24,0x00
	.db	0x22,0x00,0x20,0x00
	.db	0x1E,0x00,0x1C,0x00
	.db	0x1B,0x00,0x19,0x00
	.db	0x18,0x00,0x16,0x00
	.db	0x15,0x00,0x14,0x00
	.db	0x13,0x00,0x12,0x00
	.db	0x11,0x00,0x10,0x00
	.db	0x0F,0x00,0x0D,0x00

;===============================================
; An ALBUM consists of a song table followed by the song
; data. Song entries are 8 bytes long though only the first
; six bytes are used as offsets from the table start into
; the song data for three voices. The eighth byte of the
; table contains the number of songs stored.
;
; Albums MUST be located on a 256 byte boundary.
;
; Song table
	.org	0x2300
	; Yea Alabama -- letter A
	.db	0x00,0x99,0x00,0x99,0x00,0x99,0x00,0x05
	; Yea Alabama -- Full song
	.db	0x00,0x40,0x01,0x77,0x02,0x9B,0x00,0x00
	; Yea Alabama -- cheer
	.db	0x04,0x4B,0x04,0x6A,0x04,0x76,0x00,0x00
	; Can't touch this -- cheer
	.db	0x04,0x82,0x04,0xD5,0x05,0x05,0x00,0x00
	; Jeapordy theme song
	.db	0x05,0x35,0x05,0x35,0x05,0x35,0x00,0x00
	; Pads
	.db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	.db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	.db	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
; Song data
	.db	0x00,0x03,0x01,0x00,0x00,0x08,0x06,0x00
	.db	0x00,0x09,0x06,0x00,0x00,0x0A,0x05,0x00
	.db	0x00,0x07,0xF8,0x40,0x30,0x08,0x00,0x04
	.db	0x27,0x04,0x27,0x08,0x29,0x08,0x2A,0x08
	.db	0x2B,0x08,0x2C,0x08,0x2E,0x08,0x30,0x40
	.db	0x31,0x08,0x00,0x04,0x28,0x04,0x28,0x08
	.db	0x2A,0x08,0x2B,0x08,0x2C,0x08,0x2D,0x08
	.db	0x2F,0x08,0x31,0x40,0x32,0x20,0x32,0x10
	.db	0x2E,0x10,0x32,0x12,0x35,0x06,0x34,0x12
	.db	0x33,0x06,0x32,0x06,0x30,0x06,0x2E,0x06
	.db	0x2D,0x06,0x2B,0x06,0x29,0x06,0x00,0x0C
	.db	0x29,0x0C,0x32,0x09,0x2E,0x03,0x29,0x06
	.db	0x2B,0x12,0x29,0x06,0x00,0x0C,0x2E,0x06
	.db	0x2B,0x18,0x2E,0x06,0x2D,0x06,0x2D,0x06
	.db	0x2B,0x06,0x29,0x06,0x2D,0x06,0x2D,0x06
	.db	0x2B,0x06,0x29,0x06,0x00,0x0C,0x29,0x06
	.db	0x26,0x18,0x29,0x0C,0x2C,0x09,0x2B,0x03
	.db	0x26,0x06,0x29,0x12,0x2B,0x06,0x00,0x0C
	.db	0x27,0x06,0x29,0x0C,0x2B,0x0C,0x2B,0x06
	.db	0x24,0x06,0x26,0x06,0x28,0x06,0x24,0x06
	.db	0x26,0x06,0x28,0x06,0x26,0x06,0x24,0x06
	.db	0x2D,0x0C,0x2D,0x06,0x2B,0x09,0x29,0x03
	.db	0x2B,0x06,0x2D,0x06,0x29,0x0C,0x32,0x09
	.db	0x2E,0x03,0x29,0x06,0x2B,0x12,0x29,0x06
	.db	0x00,0x0C,0x2E,0x06,0x2B,0x12,0x2E,0x06
	.db	0x2B,0x06,0x2D,0x06,0x2D,0x06,0x2B,0x06
	.db	0x29,0x06,0x2D,0x06,0x2D,0x06,0x2E,0x06
	.db	0x30,0x06,0x32,0x06,0x32,0x06,0x32,0x06
	.db	0x31,0x18,0x30,0x06,0x2B,0x0C,0x2F,0x06
	.db	0x2B,0x0C,0x32,0x0C,0x2B,0x18,0x33,0x12
	.db	0x32,0x06,0x32,0x06,0x2B,0x0C,0x2B,0x06
	.db	0x2D,0x06,0x2E,0x0C,0x2E,0x06,0x30,0x18
	.db	0x32,0x06,0x30,0x06,0x00,0x0C,0x35,0x0C
	.db	0x32,0x09,0x2E,0x03,0x29,0x06,0x2B,0x12
	.db	0x29,0x06,0x00,0x0C,0x2E,0x06,0x2B,0x12
	.db	0x2E,0x06,0x2B,0x06,0x2D,0x06,0x2D,0x06
	.db	0x2B,0x06,0x29,0x0C,0x2D,0x06,0x2E,0x06
	.db	0x30,0x0C,0x2E,0x0C,0x30,0x0C,0x33,0x0C
	.db	0x37,0x1E,0x3A,0x06,0x00,0x00,0x04,0x40
	.db	0x2C,0x08,0x00,0x04,0x24,0x04,0x24,0x08
	.db	0x25,0x08,0x26,0x08,0x27,0x08,0x29,0x08
	.db	0x2B,0x08,0x2C,0x40,0x2D,0x08,0x00,0x04
	.db	0x25,0x04,0x25,0x08,0x26,0x08,0x27,0x08
	.db	0x28,0x08,0x2A,0x08,0x2C,0x08,0x2D,0x40
	.db	0x2E,0x20,0x2E,0x10,0x2B,0x10,0x2E,0x12
	.db	0x35,0x06,0x34,0x12,0x33,0x06,0x32,0x06
	.db	0x30,0x06,0x2E,0x06,0x2D,0x06,0x2B,0x06
	.db	0x29,0x06,0x00,0x0C,0x29,0x0C,0x2E,0x09
	.db	0x29,0x03,0x26,0x06,0x27,0x12,0x26,0x06
	.db	0x00,0x0C,0x28,0x06,0x28,0x18,0x28,0x06
	.db	0x27,0x06,0x27,0x06,0x27,0x06,0x27,0x06
	.db	0x27,0x06,0x27,0x06,0x27,0x06,0x27,0x06
	.db	0x00,0x0C,0x26,0x06,0x26,0x18,0x26,0x0C
	.db	0x28,0x09,0x29,0x03,0x29,0x06,0x29,0x12
	.db	0x29,0x06,0x00,0x0C,0x24,0x06,0x26,0x0C
	.db	0x27,0x0C,0x29,0x06,0x24,0x06,0x26,0x06
	.db	0x28,0x06,0x24,0x06,0x26,0x06,0x28,0x06
	.db	0x26,0x06,0x24,0x06,0x2D,0x0C,0x2D,0x06
	.db	0x2B,0x09,0x29,0x03,0x2B,0x06,0x2D,0x06
	.db	0x29,0x0C,0x2E,0x09,0x29,0x03,0x26,0x06
	.db	0x27,0x12,0x26,0x06,0x00,0x0C,0x28,0x06
	.db	0x28,0x12,0x28,0x06,0x28,0x06,0x27,0x06
	.db	0x27,0x06,0x27,0x06,0x27,0x06,0x27,0x06
	.db	0x27,0x06,0x27,0x06,0x2B,0x06,0x2A,0x06
	.db	0x2A,0x06,0x2B,0x06,0x2C,0x18,0x2D,0x06
	.db	0x2B,0x0C,0x2F,0x06,0x2B,0x0C,0x32,0x0C
	.db	0x2B,0x18,0x33,0x12,0x32,0x06,0x32,0x06
	.db	0x2B,0x0C,0x2B,0x06,0x2D,0x06,0x2B,0x0C
	.db	0x2B,0x06,0x2B,0x18,0x2B,0x06,0x29,0x06
	.db	0x00,0x0C,0x30,0x0C,0x2E,0x09,0x29,0x03
	.db	0x26,0x06,0x27,0x12,0x26,0x06,0x00,0x0C
	.db	0x28,0x06,0x28,0x12,0x28,0x06,0x28,0x06
	.db	0x27,0x06,0x27,0x06,0x27,0x06,0x27,0x0C
	.db	0x27,0x06,0x2B,0x06,0x2B,0x0C,0x29,0x0C
	.db	0x2B,0x0C,0x30,0x0C,0x33,0x1E,0x32,0x06
	.db	0x00,0x00,0x04,0x10,0x24,0x0C,0x20,0x04
	.db	0x1B,0x08,0x1D,0x38,0x1B,0x08,0x1B,0x08
	.db	0x1D,0x08,0x1F,0x08,0x20,0x10,0x25,0x0C
	.db	0x21,0x04,0x1C,0x08,0x1E,0x38,0x1C,0x08
	.db	0x1C,0x08,0x1E,0x08,0x20,0x08,0x21,0x10
	.db	0x26,0x0C,0x22,0x04,0x1D,0x08,0x1F,0x18
	.db	0x1D,0x20,0x24,0x10,0x24,0x10,0x24,0x12
	.db	0x1D,0x06,0x1F,0x12,0x21,0x06,0x22,0x06
	.db	0x24,0x06,0x26,0x06,0x27,0x06,0x28,0x06
	.db	0x29,0x06,0x00,0x0C,0x1D,0x06,0x22,0x06
	.db	0x00,0x06,0x1D,0x06,0x00,0x06,0x22,0x06
	.db	0x00,0x00,0x00,0x0A,0x0A,0x06,0x26,0x00
	.db	0x00,0x0A,0x08,0x06,0x25,0x00,0x00,0x0A
	.db	0x08,0x06,0x24,0x00,0x00,0x0A,0x06,0x06
	.db	0x00,0x06,0x1F,0x06,0x00,0x06,0x24,0x06
	.db	0x22,0x06,0x21,0x06,0x1F,0x06,0x1D,0x06
	.db	0x00,0x06,0x18,0x06,0x00,0x06,0x1D,0x06
	.db	0x00,0x06,0x18,0x06,0x00,0x06,0x16,0x06
	.db	0x00,0x06,0x1D,0x06,0x00,0x0C,0x22,0x0C
	.db	0x20,0x06,0x1F,0x06,0x00,0x06,0x1A,0x06
	.db	0x00,0x06,0x1F,0x06,0x00,0x06,0x1A,0x06
	.db	0x1F,0x06,0x18,0x06,0x00,0x06,0x1F,0x06
	.db	0x00,0x06,0x18,0x06,0x00,0x0C,0x1F,0x06
	.db	0x18,0x06,0x00,0x06,0x18,0x06,0x00,0x06
	.db	0x18,0x06,0x00,0x06,0x18,0x06,0x00,0x06
	.db	0x1D,0x06,0x00,0x06,0x1D,0x06,0x00,0x06
	.db	0x1D,0x06,0x1D,0x06,0x1F,0x06,0x21,0x06
	.db	0x22,0x06,0x00,0x06,0x1D,0x06,0x00,0x06
	.db	0x22,0x06,0x00,0x00,0x00,0x0A,0x0A,0x06
	.db	0x26,0x00,0x00,0x0A,0x08,0x06,0x25,0x00
	.db	0x00,0x0A,0x08,0x06,0x24,0x00,0x00,0x0A
	.db	0x06,0x06,0x00,0x06,0x1F,0x06,0x00,0x06
	.db	0x24,0x06,0x22,0x06,0x21,0x06,0x1F,0x06
	.db	0x1D,0x06,0x00,0x06,0x1D,0x06,0x00,0x06
	.db	0x1B,0x06,0x00,0x06,0x1B,0x06,0x00,0x06
	.db	0x1A,0x06,0x00,0x06,0x1C,0x06,0x1D,0x06
	.db	0x1E,0x06,0x1A,0x06,0x1C,0x06,0x1D,0x06
	.db	0x1F,0x06,0x00,0x06,0x1D,0x06,0x00,0x06
	.db	0x18,0x06,0x00,0x06,0x1A,0x06,0x00,0x06
	.db	0x20,0x06,0x00,0x06,0x20,0x06,0x00,0x06
	.db	0x1F,0x06,0x00,0x06,0x1F,0x06,0x00,0x06
	.db	0x1F,0x06,0x00,0x06,0x1F,0x06,0x00,0x06
	.db	0x1F,0x06,0x00,0x06,0x1F,0x06,0x00,0x06
	.db	0x0C,0x06,0x0E,0x06,0x1B,0x06,0x1C,0x06
	.db	0x1D,0x06,0x00,0x0C,0x1D,0x06,0x22,0x06
	.db	0x00,0x06,0x1D,0x06,0x00,0x06,0x22,0x06
	.db	0x00,0x00,0x00,0x0A,0x0A,0x06,0x26,0x00
	.db	0x00,0x0A,0x08,0x06,0x25,0x00,0x00,0x0A
	.db	0x08,0x06,0x24,0x00,0x00,0x0A,0x06,0x06
	.db	0x00,0x06,0x1F,0x06,0x00,0x06,0x24,0x06
	.db	0x22,0x06,0x21,0x06,0x1F,0x06,0x1D,0x06
	.db	0x00,0x06,0x18,0x06,0x00,0x06,0x1D,0x06
	.db	0x00,0x06,0x18,0x06,0x1D,0x0C,0x1D,0x0C
	.db	0x1D,0x0C,0x1D,0x0C,0x1D,0x1E,0x22,0x06
	.db	0x00,0x00,0x04,0x00,0x03,0x01,0x00,0x00
	.db	0x08,0x06,0x00,0x00,0x09,0x06,0x00,0x00
	.db	0x0A,0x05,0x00,0x00,0x07,0x38,0x10,0x32
	.db	0x0C,0x2E,0x04,0x29,0x08,0x2B,0x18,0x29
	.db	0x00,0x04,0x10,0x2E,0x0C,0x29,0x04,0x26
	.db	0x08,0x27,0x18,0x26,0x00,0x04,0x10,0x1D
	.db	0x0C,0x22,0x04,0x26,0x08,0x27,0x18,0x26
	.db	0x00,0x04,0x00,0x03,0x01,0x00,0x00,0x07
	.db	0xF8,0x00,0x00,0x08,0x08,0x00,0x00,0x09
	.db	0x08,0x00,0x00,0x0A,0x08,0x10,0x37,0x08
	.db	0x35,0x08,0x34,0x08,0x32,0x08,0x26,0x08
	.db	0x26,0x08,0x32,0x08,0x30,0x08,0x24,0x08
	.db	0x24,0x08,0x34,0x08,0x32,0x08,0x26,0x08
	.db	0x26,0x08,0x00,0x10,0x37,0x08,0x35,0x08
	.db	0x34,0x08,0x32,0x08,0x26,0x08,0x26,0x08
	.db	0x2D,0x08,0x30,0x08,0x24,0x08,0x24,0x08
	.db	0x34,0x08,0x32,0x08,0x26,0x08,0x26,0x08
	.db	0x00,0x08,0x00,0x00,0x04,0x20,0x00,0x08
	.db	0x00,0x08,0x29,0x08,0x29,0x10,0x00,0x08
	.db	0x28,0x08,0x28,0x10,0x00,0x08,0x29,0x08
	.db	0x29,0x08,0x00,0x20,0x00,0x08,0x00,0x08
	.db	0x29,0x08,0x29,0x10,0x00,0x08,0x28,0x08
	.db	0x28,0x10,0x00,0x08,0x29,0x08,0x29,0x08
	.db	0x00,0x08,0x00,0x00,0x04,0x20,0x00,0x08
	.db	0x00,0x08,0x2D,0x08,0x2D,0x10,0x00,0x08
	.db	0x2B,0x08,0x2B,0x10,0x00,0x08,0x2D,0x08
	.db	0x2D,0x08,0x00,0x20,0x00,0x08,0x00,0x08
	.db	0x2D,0x08,0x2D,0x10,0x00,0x08,0x2B,0x08
	.db	0x2B,0x10,0x00,0x08,0x2D,0x08,0x2D,0x08
	.db	0x00,0x08,0x00,0x00,0x04,0x00,0x03,0x01
	.db	0x00,0x00,0x07,0xFE,0x00,0x00,0x08,0x08
	.db	0x00,0x00,0x09,0x00,0x00,0x00,0x0A,0x00
	.db	0x10,0x2B,0x10,0x30,0x10,0x2B,0x10,0x24
	.db	0x10,0x2B,0x10,0x30,0x20,0x2B,0x10,0x2B
	.db	0x10,0x30,0x10,0x2B,0x10,0x30,0x10,0x34
	.db	0x08,0x00,0x08,0x32,0x08,0x30,0x08,0x2F
	.db	0x08,0x2D,0x08,0x2C,0x10,0x2B,0x10,0x30
	.db	0x10,0x2B,0x10,0x24,0x10,0x2B,0x10,0x30
	.db	0x20,0x2B,0x00,0x03,0x04,0x18,0x30,0x08
	.db	0x2D,0x10,0x2B,0x10,0x29,0x10,0x28,0x10
	.db	0x26,0x10,0x24,0x40,0x00,0x00,0x04
